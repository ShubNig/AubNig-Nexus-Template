apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "file://${project.rootDir}/mvn-repo/release"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "file://${project.rootDir}/mvn-repo/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                pom.project {
                    name POM_NAME
                    groupId GROUP
                    artifactId POM_ARTIFACT_ID
                    version VERSION_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        options {
            encoding "UTF-8"
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    task androidrReleaseEclipse(type: Copy) {
        from('build/intermediates/bundles/release/')
        exclude 'build/intermediates/bundles/release/aapt'
        into('build/eclipse/')
        include('classes.jar')
        include('res/')
        include('jni/')
        include('libs/')
        include('aidl/')
        include('assets/')
        include('R.txt')
        rename('classes.jar', "${project.name}-release.jar")
    }

    task androidReleaseEclipseZip(type: Zip, dependsOn: androidrReleaseEclipse) {
        classifier = 'eclipse'
        from "${project.buildDir}/eclipse/"
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
//        archives androidReleaseEclipseZip
        "${project.buildDir}/outputs/aar/${project.name}-release.aar"
    }

}