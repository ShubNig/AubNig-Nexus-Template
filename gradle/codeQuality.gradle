/**
 * need dependencies with
 * <pre>
 *     classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
 * </pre>
 *
 * or more than this version
 */

apply plugin: "pmd"
apply plugin: "jacoco"
apply plugin: "findbugs"
apply plugin: "com.github.kt3k.coveralls"
apply from: rootProject.file("gradle/utils.gradle")

jacoco {
    toolVersion = "0.7.6.201602180812"
//    reportsDir = file("$buildDir/customJacocoReportDir")
}

// Creates tasks based on the application build variant (productFlavor + buildType = variant)
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()

    def autoGenerated = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class'
    ]

    /**
     * Generates Lint reports name.
     */
    variant.assemble.dependsOn "lint$variantName"
    /**
     * Generates Lint reports based off the source code.
     */
    task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Pmd reports."

        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }

        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
    }

    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group "Reporting"
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        sourceDirectories = files(android.sourceSets.main.java.srcDirs)

        executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")

        classDirectories = fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated)
        additionalSourceDirs = files([
                "${buildDir}/generated/source/buildConfig/debug",
                "${buildDir}/generated/source/r/debug"
        ])
        executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
        reports {
            xml.enabled = true
            xml.destination = "${buildDir}/jacocoTestReport.xml"
            csv.enabled = false
            html.enabled = true
            html.destination = "${buildDir}/reports/jacoco"
        }
    }

    /**
     * Generates FindBugs reports based off the source code.
     */
    task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Findbugs reports."

        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }

        effort = "max"
        reportLevel = "low"
        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
        classes = fileTree(dir: variant.javaCompile.destinationDir, excludes: autoGenerated)
    }
}

// Only allows specifying of a single file
coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoDebugReport/jacocoDebugReport.xml"
}